generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String              @id @default(uuid())
  name                String
  email               String              @unique
  password            String?
  provider            AuthProvider        @default(LOCAL)
  role                UserRole            @default(USER)
  profilePicture      String?
  bio                 String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdCommunities  Community[]         @relation("CreatedCommunities")
  communityInvites    CommunityInvite[]   @relation("UserInvites")
  communityMembers    CommunityMember[]   @relation("UserCommunities")
  receivedMessages    Message[]           @relation("ReceivedMessages")
  sentMessages        Message[]           @relation("SentMessages")
  projects            Project[]           @relation("UserProjects")
  projectMembers      ProjectMember[]
  assignedTasks       Task[]              @relation("AssignedTasks")
  createdTasks        Task[]              @relation("CreatedTasks")
  taskChanges         TaskChange[]
  taskStatusHistories TaskStatusHistory[]
  startedCalls        VideoCall[]         @relation("StartedCalls")

  @@map("users")
}

model Community {
  id               String            @id @default(uuid())
  name             String
  description      String?
  isPrivate        Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdBy        String
  chats            Chat[]
  creator          User              @relation("CreatedCommunities", fields: [createdBy], references: [id])
  invites          CommunityInvite[]
  communityMembers CommunityMember[]
  messages         Message[]
  projects         Project[]
  tasks            Task[]            @relation("CommunityTasks")
  videoCalls       VideoCall[]

  @@index([createdBy])
}

model CommunityMember {
  id          String        @id @default(uuid())
  communityId String
  userId      String
  role        CommunityRole @default(VIEWER)
  joinedAt    DateTime      @default(now())
  community   Community     @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User          @relation("UserCommunities", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([communityId, userId])
}

model CommunityInvite {
  id          String    @id @default(uuid())
  communityId String
  userId      String
  code        String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation("UserInvites", fields: [userId], references: [id], onDelete: Cascade)

  @@index([communityId])
  @@index([userId])
}

model Message {
  id          String     @id @default(uuid())
  text        String?
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  senderId    String
  receiverId  String?
  communityId String?
  chatType    ChatType
  chatId      String?
  chat        Chat?      @relation(fields: [chatId], references: [id])
  community   Community? @relation(fields: [communityId], references: [id])
  receiver    User?      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender      User       @relation("SentMessages", fields: [senderId], references: [id])

  @@index([communityId])
}

model Chat {
  id          String    @id @default(uuid())
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  messages    Message[]

  @@index([communityId])
}

model TaskChange {
  id        String   @id @default(uuid())
  taskId    String
  field     String
  oldValue  String?
  newValue  String?
  changedBy String
  changedAt DateTime @default(now())
  user      User     @relation(fields: [changedBy], references: [id])

  @@index([taskId])
  @@index([changedBy])
}

model TaskStatusHistory {
  id        String     @id @default(uuid())
  taskId    String
  oldStatus TaskStatus
  newStatus TaskStatus
  changedBy String
  changedAt DateTime   @default(now())
  user      User       @relation(fields: [changedBy], references: [id])

  @@index([taskId])
  @@index([changedBy])
}

model VideoCall {
  id          String    @id @default(uuid())
  communityId String
  startedBy   String
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  isActive    Boolean   @default(true)
  community   Community @relation(fields: [communityId], references: [id])
  starter     User      @relation("StartedCalls", fields: [startedBy], references: [id])

  @@index([communityId])
  @@index([startedBy])
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String?
  emoji       String?         @default("ðŸ“Š")
  communityId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdById String
  community   Community       @relation(fields: [communityId], references: [id], onDelete: Cascade)
  createdBy   User            @relation("UserProjects", fields: [createdById], references: [id])
  members     ProjectMember[]
  tasks       Task[]

  @@unique([name, communityId])
  @@index([communityId])
  @@index([createdById])
}

model ProjectMember {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  joinedAt  DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String?
  priority     TaskPriority @default(MEDIUM)
  status       TaskStatus   @default(TODO)
  projectId    String?
  communityId  String
  assignedToId String?
  createdById  String
  dueDate      DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignedTo   User?        @relation("AssignedTasks", fields: [assignedToId], references: [id])
  community    Community    @relation("CommunityTasks", fields: [communityId], references: [id], onDelete: Cascade)
  createdBy    User         @relation("CreatedTasks", fields: [createdById], references: [id])
  project      Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([communityId])
  @@index([assignedToId])
  @@index([createdById])
}

enum UserRole {
  USER
  ADMIN
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum CommunityRole {
  OWNER
  ADMIN
  MANAGER
  DEVELOPER_I
  DEVELOPER_II
  DEVELOPER_III
  VIEWER
}

enum ChatType {
  PRIVATE
  GROUP
}

enum AuthProvider {
  LOCAL
  GOOGLE
  GITHUB
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
